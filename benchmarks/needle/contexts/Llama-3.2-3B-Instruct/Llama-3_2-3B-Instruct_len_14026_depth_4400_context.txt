<|begin_of_text|><|begin_of_text|>December 2014I've read Villehardouin's chronicle of the Fourth Crusade at least
two times, maybe three.  And yet if I had to write down everything
I remember from it, I doubt it would amount to much more than a
page.  Multiply this times several hundred, and I get an uneasy
feeling when I look at my bookshelves. What use is it to read all
these books if I remember so little from them?A few months ago, as I was reading Constance Reid's excellent
biography of Hilbert, I figured out if not the answer to this
question, at least something that made me feel better about it.
She writes:

  Hilbert had no patience with mathematical lectures which filled
  the students with facts but did not teach them how to frame a
  problem and solve it. He often used to tell them that "a perfect
  formulation of a problem is already half its solution."

That has always seemed to me an important point, and I was even
more convinced of it after hearing it confirmed by Hilbert.But how had I come to believe in this idea in the first place?  A
combination of my own experience and other things I'd read.  None
of which I could at that moment remember!  And eventually I'd forget
that Hilbert had confirmed it too.  But my increased belief in the
importance of this idea would remain something I'd learned from
this book, even after I'd forgotten I'd learned it.Reading and experience train your model of the world.  And even if
you forget the experience or what you read, its effect on your model
of the world persists.  Your mind is like a compiled program you've
lost the source of.  It works, but you don't know why.The place to look for what I learned from Villehardouin's chronicle
is not what I remember from it, but my mental models of the crusades,
Venice, medieval culture, siege warfare, and so on.  Which doesn't
mean I couldn't have read more attentively, but at least the harvest
of reading is not so miserably small as it might seem.This is one of those things that seem obvious in retrospect.  But
it was a surprise to me and presumably would be to anyone else who
felt uneasy about (apparently) forgetting so much they'd read.Realizing it does more than make you feel a little better about
forgetting, though.  There are specific implications.For example, reading and experience are usually "compiled" at the
time they happen, using the state of your brain at that time.  The
same book would get compiled differently at different points in
your life.  Which means it is very much worth reading important
books multiple times.  I always used to feel some misgivings about
rereading books.  I unconsciously lumped reading together with work
like carpentry, where having to do something again is a sign you
did it wrong the first time.  Whereas now the phrase "already read"
seems almost ill-formed.Intriguingly, this implication isn't limited to books.  Technology
will increasingly make it possible to relive our experiences.  When
people do that today it's usually to enjoy them again (e.g. when
looking at pictures of a trip) or to find the origin of some bug in
their compiled code (e.g. when Stephen Fry succeeded in remembering
the childhood trauma that prevented him from singing).  But as
technologies for recording and playing back your life improve, it
may become common for people to relive experiences without any goal
in mind, simply to learn from them again as one might when rereading
a book.Eventually we may be able not just to play back experiences but
also to index and even edit them. So although not knowing how you
know things may seem part of being human, it may not be.
Thanks to Sam Altman, Jessica Livingston, and Robert Morris for reading 
drafts of this.April 2012A palliative care nurse called Bronnie Ware made a list of the
biggest regrets
of the dying.  Her list seems plausible.  I could see
myself — can see myself — making at least 4 of these
5 mistakes.If you had to compress them into a single piece of advice, it might
be: don't be a cog.  The 5 regrets paint a portrait of post-industrial
man, who shrinks himself into a shape that fits his circumstances,
then turns dutifully till he stops.The alarming thing is, the mistakes that produce these regrets are
all errors of omission.  You forget your dreams, ignore your family,
suppress your feelings, neglect your friends, and forget to be
happy.  Errors of omission are a particularly dangerous type of
mistake, because you make them by default.I would like to avoid making these mistakes.  But how do you avoid
mistakes you make by default?  Ideally you transform your life so
it has other defaults.  But it may not be possible to do that
completely. As long as these mistakes happen by default, you probably
have to be reminded not to make them.  So I inverted the 5 regrets,
yielding a list of 5 commands

   Don't ignore your dreams; don't work too much; say what you
   think; cultivate friendships; be happy.

which I then put at the top of the file I use as a todo list.November 2005In the next few years, venture capital funds will find themselves
squeezed from four directions.  They're already stuck with a seller's
market, because of the huge amounts they raised at the end of the
Bubble and still haven't invested.  This by itself is not the end
of the world.  In fact, it's just a more extreme version of the
norm
in the VC business: too much money chasing too few deals.Unfortunately, those few deals now want less and less money, because
it's getting so cheap to start a startup.  The four causes: open
source, which makes software free; Moore's law, which makes hardware
geometrically closer to free; the Web, which makes promotion free
if you're good; and better languages, which make development a lot
cheaper.When we started our startup in 1995, the first three were our biggest
expenses.  We had to pay $5000 for the Netscape Commerce Server,
the only software that then supported secure http connections.  We
paid $3000 for a server with a 90 MHz processor and 32 meg of
memory.  And we paid a PR firm about $30,000 to promote our launch.Now you could get all three for nothing.  You can get the software
for free; people throw away computers more powerful than our first
server; and if you make something good you can generate ten times
as much traffic by word of mouth online than our first PR firm got
through the print media.And of course another big change for the average startup is that
programming languages have improved-- or rather, the median language has.  At most startups ten years
ago, software development meant ten programmers writing code in
C++.  Now the same work might be done by one or two using Python
or Ruby.During the Bubble, a lot of people predicted that startups would
outsource their development to India.  I think a better model for
the future is David Heinemeier Hansson, who outsourced his development
to a more powerful language instead.  A lot of well-known applications
are now, like BaseCamp, written by just one programmer.  And one
guy is more than 10x cheaper than ten, because (a) he won't waste
any time in meetings, and (b) since he's probably a founder, he can
pay himself nothing.Because starting a startup is so cheap, venture capitalists now
often want to give startups more money than the startups want to
take.  VCs like to invest several million at a time.  But as one
VC told me after a startup he funded would only take about half a
million, "I don't know what we're going to do.  Maybe we'll just
have to give some of it back." Meaning give some of the fund back
to the institutional investors who supplied it, because it wasn't
going to be possible to invest it all.Into this already bad situation comes the third problem: Sarbanes-Oxley.
Sarbanes-Oxley is a law, passed after the Bubble, that drastically
increases the regulatory burden on public companies. And in addition
to the cost of compliance, which is at least two million dollars a
year, the law introduces frightening legal exposure for corporate
officers.  An experienced CFO I know said flatly: "I would not
want to be CFO of a public company now."You might think that responsible corporate governance is an area
where you can't go too far.  But you can go too far in any law, and
this remark convinced me that Sarbanes-Oxley must have.  This CFO
is both the smartest and the most upstanding money guy I know.  If
Sarbanes-Oxley deters people like him from being CFOs of public  
companies, that's proof enough that it's broken.Largely because of Sarbanes-Oxley, few startups go public now.  For
all practical purposes, succeeding now equals getting bought.  Which
means VCs are now in the business of finding promising little 2-3
man startups and pumping them up into companies that cost $100
million to acquire.   They didn't mean to be in this business; it's
just what their business has evolved into.Hence the fourth problem: the acquirers have begun to realize they
can buy wholesale.  Why should they wait for VCs to make the startups
they want more expensive?  Most of what the VCs add, acquirers don't
want anyway.  The acquirers already have brand recognition and HR
departments.  What they really want is the software and the developers,
and that's what the startup is in the early phase: concentrated
software and developers.Google, typically, seems to have been the first to figure this out.
"Bring us your startups early," said Google's speaker at the Startup School.  They're quite
explicit about it: they like to acquire startups at just the point
where they would do a Series A round.  (The Series A round is the
first round of real VC funding; it usually happens in the first
year.) It is a brilliant strategy, and one that other big technology
companies will no doubt try to duplicate.  Unless they want to have 
still more of their lunch eaten by Google.Of course, Google has an advantage in buying startups: a lot of the
people there are rich, or expect to be when their options vest.
Ordinary employees find it very hard to recommend an acquisition;
it's just too annoying to see a bunch of twenty year olds get rich
when you're still working for salary.  Even if it's the right thing   
for your company to do.The Solution(s)Bad as things look now, there is a way for VCs to save themselves.
They need to do two things, one of which won't surprise them, and  
another that will seem an anathema.Let's start with the obvious one: lobby to get Sarbanes-Oxley  
loosened.  This law was created to prevent future Enrons, not to
destroy the IPO market.  Since the IPO market was practically dead
when it passed, few saw what bad effects it would have.  But now 
that technology has recovered from the last bust, we can see clearly
what a bottleneck Sarbanes-Oxley has become.Startups are fragile plants—seedlings, in fact.  These seedlings
are worth protecting, because they grow into the trees of the
economy.  Much of the economy's growth is their growth.  I think
most politicians realize that.  But they don't realize just how   
fragile startups are, and how easily they can become collateral
damage of laws meant to fix some other problem.Still more dangerously, when you destroy startups, they make very
little noise.  If you step on the toes of the coal industry, you'll
hear about it.  But if you inadvertantly squash the startup industry,
all that happens is that the founders of the next Google stay in 
grad school instead of starting a company.My second suggestion will seem shocking to VCs: let founders cash  
out partially in the Series A round.  At the moment, when VCs invest
in a startup, all the stock they get is newly issued and all the 
money goes to the company.  They could buy some stock directly from
the founders as well.Most VCs have an almost religious rule against doing this.  They
don't want founders to get a penny till the company is sold or goes
public.  VCs are obsessed with control, and they worry that they'll
have less leverage over the founders if the founders have any money.This is a dumb plan.  In fact, letting the founders sell a little stock
early would generally be better for the company, because it would
cause the founders' attitudes toward risk to be aligned with the
VCs'.  As things currently work, their attitudes toward risk tend
to be diametrically opposed: the founders, who have nothing, would
prefer a 100% chance of $1 million to a 20% chance of $10 million,
while the VCs can afford to be "rational" and prefer the latter.Whatever they say, the reason founders are selling their companies
early instead of doing Series A rounds is that they get paid up
front.  That first million is just worth so much more than the
subsequent ones.  If founders could sell a little stock early,
they'd be happy to take VC money and bet the rest on a bigger
outcome.So why not let the founders have that first million, or at least
half million?  The VCs would get same number of shares for the   
money.  So what if some of the money would go to the  
founders instead of the company?Some VCs will say this is
unthinkable—that they want all their money to be put to work
growing the company.  But the fact is, the huge size of current VC
investments is dictated by the structure
of VC funds, not the needs of startups.  Often as not these large  
investments go to work destroying the company rather than growing
it.The angel investors who funded our startup let the founders sell
some stock directly to them, and it was a good deal for everyone. 
The angels made a huge return on that investment, so they're happy.
And for us founders it blunted the terrifying all-or-nothingness
of a startup, which in its raw form is more a distraction than a
motivator.If VCs are frightened at the idea of letting founders partially
cash out, let me tell them something still more frightening: you
are now competing directly with Google.
Thanks to Trevor Blackwell, Sarah Harlin, Jessica
Livingston, and Robert Morris for reading drafts of this.April 2006(This essay is derived from a talk at the 2006 
Startup School.)The startups we've funded so far are pretty quick, but they seem
quicker to learn some lessons than others.  I think it's because
some things about startups are kind of counterintuitive.We've now 
invested 
in enough companies that I've learned a trick
for determining which points are the counterintuitive ones:
they're the ones I have to keep repeating.So I'm going to number these points, and maybe with future startups
I'll be able to pull off a form of Huffman coding. I'll make them
all read this, and then instead of nagging them in detail, I'll
just be able to say: number four!
1. Release Early.The thing I probably repeat most is this recipe for a startup: get
a version 1 out fast, then improve it based on users' reactions.By "release early" I don't mean you should release something full
of bugs, but that you should release something minimal.  Users hate
bugs, but they don't seem to mind a minimal version 1, if there's
more coming soon.There are several reasons it pays to get version 1 done fast.  One
is that this is simply the right way to write software, whether for
a startup or not.  I've been repeating that since 1993, and I haven't seen much since to
contradict it.  I've seen a lot of startups die because they were
too slow to release stuff, and none because they were too quick.
[1]One of the things that will surprise you if you build something
popular is that you won't know your users.  Reddit now has almost half a million
unique visitors a month.  Who are all those people?  They have no
idea.  No web startup does.  And since you don't know your users,
it's dangerous to guess what they'll like.  Better to release
something and let them tell you.Wufoo took this to heart and released
their form-builder before the underlying database.  You can't even
drive the thing yet, but 83,000 people came to sit in the driver's
seat and hold the steering wheel.  And Wufoo got valuable feedback
from it: Linux users complained they used too much Flash, so they
rewrote their software not to.  If they'd waited to release everything
at once, they wouldn't have discovered this problem till it was
more deeply wired in.Even if you had no users, it would still be important to release
quickly, because for a startup the initial release acts as a shakedown
cruise.  If anything major is broken-- if the idea's no good,
for example, or the founders hate one another-- the stress of getting
that first version out will expose it.  And if you have such problems
you want to find them early.Perhaps the most important reason to release early, though, is that
it makes you work harder.  When you're working on something that
isn't released, problems are intriguing.  In something that's out
there, problems are alarming.  There is a lot more urgency once you
release.  And I think that's precisely why people put it off.  They
know they'll have to work a lot harder once they do. 
[2]
2. Keep Pumping Out Features.Of course, "release early" has a second component, without which
it would be bad advice.  If you're going to start with something
that doesn't do much, you better improve it fast.What I find myself repeating is "pump out features."  And this rule
isn't just for the initial stages.  This is something all startups
should do for as long as they want to be considered startups.I don't mean, of course, that you should make your application ever
more complex.  By "feature" I mean one unit of hacking-- one quantum
of making users' lives better.As with exercise, improvements beget improvements.  If you run every
day, you'll probably feel like running tomorrow.  But if you skip
running for a couple weeks, it will be an effort to drag yourself
out.  So it is with hacking: the more ideas you implement, the more
ideas you'll have.  You should make your system better at least in
some small way every day or two.This is not just a good way to get development done; it is also a
form of marketing.  Users love a site that's constantly improving.
In fact, users expect a site to improve.  Imagine if you visited a
site that seemed very good, and then returned two months later and
not one thing had changed.  Wouldn't it start to seem lame? 
[3]They'll like you even better when you improve in response to their
comments, because customers are used to companies ignoring them.
If you're the rare exception-- a company that actually listens--
you'll generate fanatical loyalty.  You won't need to advertise,
because your users will do it for you.This seems obvious too, so why do I have to keep repeating it?  I
think the problem here is that people get used to how things are.
Once a product gets past the stage where it has glaring flaws, you
start to get used to it, and gradually whatever features it happens
to have become its identity.  For example, I doubt many people at
Yahoo (or Google for that matter) realized how much better web mail
could be till Paul Buchheit showed them.I think the solution is to assume that anything you've made is far
short of what it could be.  Force yourself, as a sort of intellectual
exercise, to keep thinking of improvements.  Ok, sure, what you
have is perfect.  But if you had to change something, what would
it be?If your product seems finished, there are two possible explanations:
(a) it is finished, or (b) you lack imagination.  Experience suggests
(b) is a thousand times more likely.
3. Make Users Happy.Improving constantly is an instance of a more general rule: make
users happy.  One thing all startups have in common is that they
can't force anyone to do anything.  They can't force anyone to use
their software, and they can't force anyone to do deals with them.
A startup has to sing for its supper.  That's why the successful
ones make great things.  They have to, or die.When you're running a startup you feel like a little bit of debris
blown about by powerful winds.  The most powerful wind is users.
They can either catch you and loft you up into the sky, as they did
with Google, or leave you flat on the pavement, as they do with
most startups.  Users are a fickle wind, but more powerful than any
other.  If they take you up, no competitor can keep you down.As a little piece of debris, the rational thing for you to do is
not to lie flat, but to curl yourself into a shape the wind will
catch.I like the wind metaphor because it reminds you how impersonal the
stream of traffic is.  The vast majority of people who visit your
site will be casual visitors.  It's them you have to design your
site for.  The people who really care will find what they want by
themselves.The median visitor will arrive with their finger poised on the Back
button.  Think about your own experience: most links you
follow lead to something lame.  Anyone who has used the web for
more than a couple weeks has been trained to click on Back after
following a link.  So your site has to say "Wait!  Don't click on
Back.  This site isn't lame.  Look at this, for example."There are two things you have to do to make people pause.  The most
important is to explain, as concisely as possible, what the hell
your site is about.  How often have you visited a site that seemed
to assume you already knew what they did?  For example, the corporate
site that says the
company makes

  enterprise content management solutions for business that enable
  organizations to unify people, content and processes to minimize
  business risk, accelerate time-to-value and sustain lower total
  cost of ownership.

An established company may get away with such an opaque description,
but no startup can.  A startup
should be able to explain in one or two sentences exactly what it
does. 
[4]
And not just to users.  You need this for everyone:
investors, acquirers, partners, reporters, potential employees, and
even current employees.  You probably shouldn't even start a company
to do something that can't be described compellingly in one or two
sentences.The other thing I repeat is to give people everything you've got,
right away.  If you have something impressive, try to put it on the
front page, because that's the only one most visitors will see.
Though indeed there's a paradox here: the more you push the good
stuff toward the front, the more likely visitors are to explore
further. 
[5]In the best case these two suggestions get combined: you tell
visitors what your site is about by showing them.  One of the
standard pieces of advice in fiction writing is "show, don't tell."
Don't say that a character's angry; have him grind his teeth, or
break his pencil in half.  Nothing will explain what your site does
so well as using it.The industry term here is "conversion."  The job of your site is
to convert casual visitors into users-- whatever your definition
of a user is.  You can measure this in your growth rate.  Either
your site is catching on, or it isn't, and you must know which.  If
you have decent growth, you'll win in the end, no matter how obscure
you are now.  And if you don't, you need to fix something.
4. Fear the Right Things.Another thing I find myself saying a lot is "don't worry."  Actually,
it's more often "don't worry about this; worry about that instead."
Startups are right to be paranoid, but they sometimes fear the wrong
things.Most visible disasters are not so alarming as they seem.  Disasters
are normal in a startup: a founder quits, you discover a patent
that covers what you're doing, your servers keep crashing, you run
into an insoluble technical problem, you have to change your name,
a deal falls through-- these are all par for the course.  They won't
kill you unless you let them.Nor will most competitors.  A lot of startups worry "what if Google
builds something like us?"  Actually big companies are not the ones
you have to worry about-- not even Google.  The people at Google
are smart, but no smarter than you; they're not as motivated, because
Google is not going to go out of business if this one product fails;
and even at Google they have a lot of bureaucracy to slow them down.What you should fear, as a startup, is not the established players,
but other startups you don't know exist yet.  They're way more
dangerous than Google because, like you, they're cornered animals.Looking just at existing competitors can give you a false sense of
security.  You should compete against what someone else could be
doing, not just what you can see people doing.  A corollary is that
you shouldn't relax just because you have no visible competitors
yet.  No matter what your idea, there's someone else out there
working on the same thing.That's the downside of it being easier to start a startup: more people
are doing it.  But I disagree with Caterina Fake when she says that
makes this a bad time to start a startup.  More people are starting
startups, but not as many more as could.  Most college graduates
still think they have to get a job.  The average person can't ignore
something that's been beaten into their head since they were three
just because serving web pages recently got a lot cheaper.And in any case, competitors are not the biggest threat.  Way more
startups hose themselves than get crushed by competitors.  There
are a lot of ways to do it, but the three main ones are internal
disputes, inertia, and ignoring users.  Each is, by itself, enough
to kill you.  But if I had to pick the worst, it would be ignoring
users.  If you want a recipe for a startup that's going to die,
here it is: a couple of founders who have some great idea they know
everyone is going to love, and that's what they're going to build,
no matter what.Almost everyone's initial plan is broken.  If companies stuck to
their initial plans, Microsoft would be selling programming languages,
and Apple would be selling printed circuit boards.  In both cases
their customers told them what their business should be-- and they
were smart enough to listen.As Richard Feynman said, the imagination of nature is greater than
the imagination of man.<|begin_of_text|>
The best thing to do in San Francisco is eat a sandwich and sit in Dolores Park on a sunny day.
  You'll find more interesting things by
looking at the world than you could ever produce just by thinking.
This principle is very powerful.  It's why the best abstract painting
still falls short of Leonardo, for example.  And it applies to
startups too.  No idea for a product could ever be so clever as the
ones you can discover by smashing a beam of prototypes into a beam
of users.
5. Commitment Is a Self-Fulfilling Prophecy.I now have enough experience with startups to be able to say what
the most important quality is in a startup founder, and it's not
what you might think.  The most important quality in a startup
founder is determination.  Not intelligence-- determination.This is a little depressing.  I'd like to believe Viaweb succeeded
because we were smart, not merely determined.  A lot of people in
the startup world want to believe that.  Not just founders, but
investors too.  They like the idea of inhabiting a world ruled by
intelligence.  And you can tell they really believe this, because
it affects their investment decisions.Time after time VCs invest in startups founded by eminent professors.
This may work in biotech, where a lot of startups simply commercialize
existing research, but in software you want to invest in students,
not professors.  Microsoft, Yahoo, and Google were all founded by
people who dropped out of school to do it.  What students lack in
experience they more than make up in dedication.Of course, if you want to get rich, it's not enough merely to be
determined.  You have to be smart too, right?  I'd like to think
so, but I've had an experience that convinced me otherwise: I spent
several years living in New York.You can lose quite a lot in the brains department and it won't kill
you.  But lose even a little bit in the commitment department, and
that will kill you very rapidly.Running a startup is like walking on your hands: it's possible, but
it requires extraordinary effort.  If an ordinary employee were
asked to do the things a startup founder has to, he'd be very
indignant.  Imagine if you were hired at some big company, and in
addition to writing software ten times faster than you'd ever had
to before, they expected you to answer support calls, administer
the servers, design the web site, cold-call customers, find the
company office space, and go out and get everyone lunch.And to do all this not in the calm, womb-like atmosphere of a big
company, but against a backdrop of constant disasters.  That's the
part that really demands determination.  In a startup, there's
always some disaster happening.  So if you're the least bit inclined
to find an excuse to quit, there's always one right there.But if you lack commitment, chances are it will have been hurting
you long before you actually quit.  Everyone who deals with startups
knows how important commitment is, so if they sense you're ambivalent,
they won't give you much attention.  If you lack commitment, you'll
just find that for some mysterious reason good things happen to
your competitors but not to you.  If you lack commitment, it will
seem to you that you're unlucky.Whereas if you're determined to stick around, people will pay
attention to you, because odds are they'll have to deal with you
later.  You're a local, not just a tourist, so everyone has to come
to terms with you.At Y Combinator we sometimes mistakenly fund teams who have the
attitude that they're going to give this startup thing a shot for
three months, and if something great happens, they'll stick with
it-- "something great" meaning either that someone wants to buy
them or invest millions of dollars in them.  But if this is your
attitude, "something great" is very unlikely to happen to you,
because both acquirers and investors judge you by your level of
commitment.If an acquirer thinks you're going to stick around no matter what,
they'll be more likely to buy you, because if they don't and you
stick around, you'll probably grow, your price will go up, and
they'll be left wishing they'd bought you earlier.  Ditto for
investors.  What really motivates investors, even big VCs, is not
the hope of good returns, but the fear of missing out. 
[6]
So if
you make it clear you're going to succeed no matter what, and the only
reason you need them is to make it happen a little faster, you're
much more likely to get money.You can't fake this.  The only way to convince everyone that you're
ready to fight to the death is actually to be ready to.You have to be the right kind of determined, though.  I carefully
chose the word determined rather than stubborn, because stubbornness
is a disastrous quality in a startup.  You have to be determined,
but flexible, like a running back.  A successful running back doesn't
just put his head down and try to run through people.  He improvises:
if someone appears in front of him, he runs around them; if someone
tries to grab him, he spins out of their grip; he'll even run in
the wrong direction briefly if that will help.  The one thing he'll
never do is stand still. 
[7]
6. There Is Always Room.I was talking recently to a startup founder about whether it might
be good to add a social component to their software.  He said he
didn't think so, because the whole social thing was tapped out.
Really?  So in a hundred years the only social networking sites
will be the Facebook, MySpace, Flickr, and Del.icio.us?  Not likely.There is always room for new stuff.  At every point in history,
even the darkest bits of the dark ages, people were discovering
things that made everyone say "why didn't anyone think of that
before?"  We know this continued to be true up till 2004, when the
Facebook was founded-- though strictly speaking someone else did
think of that.The reason we don't see the opportunities all around us is that we
adjust to however things are, and assume that's how things have to
be.  For example, it would seem crazy to most people to try to make
a better search engine than Google.  Surely that field, at least,
is tapped out.  Really?  In a hundred years-- or even twenty-- are
people still going to search for information using something like
the current Google?  Even Google probably doesn't think that.In particular, I don't think there's any limit to the number of
startups.  Sometimes you hear people saying "All these guys starting
startups now are going to be disappointed. How many little startups
are Google and Yahoo going to buy, after all?" That sounds cleverly
skeptical, but I can prove it's mistaken.  No one proposes that
there's some limit to the number of people who can be employed in
an economy consisting of big, slow-moving companies with a couple
thousand people each.  Why should there be any limit to the number
who could be employed by small, fast-moving companies with ten each?
It seems to me the only limit would be the number of people who
want to work that hard.The limit on the number of startups is not the number that can get
acquired by Google and Yahoo-- though it seems even that should
be unlimited, if the startups were actually worth buying-- but the
amount of wealth that can be created.  And I don't think there's
any limit on that, except cosmological ones.So for all practical purposes, there is no limit to the number of
startups.  Startups make wealth, which means they make things people
want, and if there's a limit on the number of things people want,
we are nowhere near it.  I still don't even have a flying car.
7. Don't Get Your Hopes Up.This is another one I've been repeating since long before Y Combinator.
It was practically the corporate motto at Viaweb.Startup founders are naturally optimistic.  They wouldn't do it
otherwise.  But you should treat your optimism the way you'd treat
the core of a nuclear reactor: as a source of power that's also
very dangerous.  You have to build a shield around it, or it will
fry you.The shielding of a reactor is not uniform; the reactor would be
useless if it were.  It's pierced in a few places to let pipes in.
An optimism shield has to be pierced too.  I think the place to
draw the line is between what you expect of yourself, and what you
expect of other people.  It's ok to be optimistic about what you
can do, but assume the worst about machines and other people.This is particularly necessary in a startup, because you tend to
be pushing the limits of whatever you're doing.  So things don't
happen in the smooth, predictable way they do in the rest of the
world.  Things change suddenly, and usually for the worse.Shielding your optimism is nowhere more important than with deals.
If your startup is doing a deal, just assume it's not going to
happen.  The VCs who say they're going to invest in you aren't.
The company that says they're going to buy you isn't.  The big
customer who wants to use your system in their whole company won't.
Then if things work out you can be pleasantly surprised.The reason I warn startups not to get their hopes up is not to save
them from being disappointed when things fall through.  It's
for a more practical reason: to prevent them from leaning their
company against something that's going to fall over, taking them
with it.For example, if someone says they want to invest in you, there's a
natural tendency to stop looking for other investors.  That's why
people proposing deals seem so positive: they want you to
stop looking.  And you want to stop too, because doing deals is a
pain.  Raising money, in particular, is a huge time sink.  So you
have to consciously force yourself to keep looking.Even if you ultimately do the first deal, it will be to your advantage
to have kept looking, because you'll get better terms.  Deals are
dynamic; unless you're negotiating with someone unusually honest,
there's not a single point where you shake hands and the deal's
done. There are usually a lot of subsidiary questions to be cleared
up after the handshake, and if the other side senses weakness-- if
they sense you need this deal-- they will be very tempted to screw
you in the details.VCs and corp dev guys are professional negotiators.  They're trained
to take advantage of weakness. 
[8]
So while they're often nice
guys, they just can't help it.  And as pros they do this more than
you.  So don't even try to bluff them.  The only way a startup can
have any leverage in a deal is genuinely not to need it.  And if
you don't believe in a deal, you'll be less likely to depend on it.So I want to plant a hypnotic suggestion in your heads: when you
hear someone say the words "we want to invest in you" or "we want
to acquire you," I want the following phrase to appear automatically
in your head: don't get your hopes up.  Just continue running
your company as if this deal didn't exist.  Nothing is more likely
to make it close.The way to succeed in a startup is to focus on the goal of getting
lots of users, and keep walking swiftly toward it while investors
and acquirers scurry alongside trying to wave money in your face.
Speed, not MoneyThe way I've described it, starting a startup sounds pretty stressful.
It is.  When I talk to the founders of the companies we've funded,
they all say the same thing: I knew it would be hard, but I didn't
realize it would be this hard.So why do it?  It would be worth enduring a lot of pain and stress
to do something grand or heroic, but just to make money?  Is making
money really that important?No, not really.  It seems ridiculous to me when people take business
too seriously.  I regard making money as a boring errand to be got
out of the way as soon as possible.  There is nothing grand or
heroic about starting a startup per se.So why do I spend so much time thinking about startups?  I'll tell
you why.  Economically, a startup is best seen not as a way to get
rich, but as a way to work faster.  You have to make a living, and
a startup is a way to get that done quickly, instead of letting it
drag on through your whole life.
[9]We take it for granted most of the time, but human life is fairly
miraculous.  It is also palpably short.  You're given this marvellous
thing, and then poof, it's taken away.  You can see why people
invent gods to explain it.  But even to people who don't believe
in gods, life commands respect.  There are times in most of our
lives when the days go by in a blur, and almost everyone has a
sense, when this happens, of wasting something precious.  As Ben
Franklin said, if you love life, don't waste time, because time is
what life is made of.So no, there's nothing particularly grand about making money.  That's
not what makes startups worth the trouble.  What's important about
startups is the speed.  By compressing the dull but necessary task
of making a living into the smallest possible time, you show respect
for life, and there is something grand about that.Notes[1]
Startups can die from releasing something full of bugs, and not
fixing them fast enough, but I don't know of any that died from
releasing something stable but minimal very early, then promptly
improving it.[2]
I know this is why I haven't released Arc.  The moment I do,
I'll have people nagging me for features.[3]
A web site is different from a book or movie or desktop application
in this respect.  Users judge a site not as a single snapshot, but
as an animation with multiple frames.  Of the two, I'd say the rate of
improvement is more important to users than where you currently
are.[4]
It should not always tell this to users, however.  For example,
MySpace is basically a replacement mall for mallrats.  But it was
wiser for them, initially, to pretend that the site was about bands.[5]
Similarly, don't make users register to try your site.  Maybe
what you have is so valuable that visitors should gladly register
to get at it.  But they've been trained to expect the opposite.
Most of the things they've tried on the web have sucked-- and
probably especially those that made them register.[6]
VCs have rational reasons for behaving this way. They don't
make their money (if they make money) off their median investments.
In a typical fund, half the companies fail, most of the rest generate
mediocre returns, and one or two "make the fund" by succeeding
spectacularly.  So if they miss just a few of the most promising
opportunities, it could hose the whole fund.[7]
The attitude of a running back doesn't translate to soccer.
Though it looks great when a forward dribbles past multiple defenders,
a player who persists in trying such things will do worse in the
long term than one who passes.[8]
The reason Y Combinator never negotiates valuations
is that we're not professional negotiators, and don't want to turn
into them.[9]
There are two ways to do 
work you love: (a) to make money, then work
on what you love, or (b) to get a job where you get paid to work on
stuff you love.  In practice the first phases of both
consist mostly of unedifying schleps, and in (b) the second phase is less
secure.Thanks to Sam Altman, Trevor Blackwell, Beau Hartshorne, Jessica 
Livingston, and Robert Morris for reading drafts of this.September 2017The most valuable insights are both general and surprising. 
F = ma for example. But general and surprising is a hard
combination to achieve. That territory tends to be picked
clean, precisely because those insights are so valuable.Ordinarily, the best that people can do is one without the
other: either surprising without being general (e.g.
gossip), or general without being surprising (e.g.
platitudes).Where things get interesting is the moderately valuable
insights.  You get those from small additions of whichever
quality was missing.  The more common case is a small
addition of generality: a piece of gossip that's more than
just gossip, because it teaches something interesting about
the world. But another less common approach is to focus on
the most general ideas and see if you can find something new
to say about them. Because these start out so general, you
only need a small delta of novelty to produce a useful
insight.A small delta of novelty is all you'll be able to get most
of the time. Which means if you take this route, your ideas
will seem a lot like ones that already exist. Sometimes
you'll find you've merely rediscovered an idea that did
already exist.  But don't be discouraged.  Remember the huge
multiplier that kicks in when you do manage to think of
something even a little new.Corollary: the more general the ideas you're talking about,
the less you should worry about repeating yourself.  If you
write enough, it's inevitable you will.  Your brain is much
the same from year to year and so are the stimuli that hit
it. I feel slightly bad when I find I've said something
close to what I've said before, as if I were plagiarizing
myself. But rationally one shouldn't.  You won't say
something exactly the same way the second time, and that
variation increases the chance you'll get that tiny but
critical delta of novelty.And of course, ideas beget ideas.  (That sounds 
familiar.)
An idea with a small amount of novelty could lead to one
with more. But only if you keep going. So it's doubly
important not to let yourself be discouraged by people who
say there's not much new about something you've discovered.
"Not much new" is a real achievement when you're talking
about the most general ideas. It's not true that there's nothing new under the sun.  There
are some domains where there's almost nothing new.  But
there's a big difference between nothing and almost nothing,
when it's multiplied by the area under the sun.
Thanks to Sam Altman, Patrick Collison, and Jessica
Livingston for reading drafts of this.February 2007A few days ago I finally figured out something I've wondered about
for 25 years: the relationship between wisdom and intelligence.
Anyone can see they're not the same by the number of people who are
smart, but not very wise.  And yet intelligence and wisdom do seem
related.  How?What is wisdom?  I'd say it's knowing what to do in a lot of
situations.  I'm not trying to make a deep point here about the
true nature of wisdom, just to figure out how we use the word.  A
wise person is someone who usually knows the right thing to do.And yet isn't being smart also knowing what to do in certain
situations?  For example, knowing what to do when the teacher tells
your elementary school class to add all the numbers from 1 to 100?
[1]Some say wisdom and intelligence apply to different types of
problems—wisdom to human problems and intelligence to abstract
ones.  But that isn't true.  Some wisdom has nothing to do with
people: for example, the wisdom of the engineer who knows certain
structures are less prone to failure than others.  And certainly
smart people can find clever solutions to human problems as well
as abstract ones. 
[2]Another popular explanation is that wisdom comes from experience
while intelligence is innate.  But people are not simply wise in
proportion to how much experience they have.  Other things must
contribute to wisdom besides experience, and some may be innate: a
reflective disposition, for example.Neither of the conventional explanations of the difference between
wisdom and intelligence stands up to scrutiny.  So what is the
difference?  If we look at how people use the words "wise" and
"smart," what they seem to mean is different shapes of performance.Curve"Wise" and "smart" are both ways of saying someone knows what to
do.  The difference is that "wise" means one has a high average
outcome across all situations, and "smart" means one does spectacularly
well in a few.  That is, if you had a graph in which the x axis
represented situations and the y axis the outcome, the graph of the
wise person would be high overall, and the graph of the smart person
would have high peaks.The distinction is similar to the rule that one should judge talent
at its best and character at its worst.  Except you judge intelligence
at its best, and wisdom by its average.  That's how the two are
related: they're the two different senses in which the same curve
can be high.So a wise person knows what to do in most situations, while a smart
person knows what to do in situations where few others could.  We
need to add one more qualification: we should ignore cases where
someone knows what to do because they have inside information. 
[3]
But aside from that, I don't think we can get much more specific
without starting to be mistaken.Nor do we need to.  Simple as it is, this explanation predicts, or
at least accords with, both of the conventional stories about the
distinction between wisdom and intelligence.  Human problems are
the most common type, so being good at solving those is key in
achieving a high average outcome.   And it seems natural that a
high average outcome depends mostly on experience, but that dramatic
peaks can only be achieved by people with certain rare, innate
qualities; nearly anyone can learn to be a good swimmer, but to be
an Olympic swimmer you need a certain body type.This explanation also suggests why wisdom is such an elusive concept:
there's no such thing.  "Wise" means something—that one is
on average good at making the right choice.  But giving the name
"wisdom" to the supposed quality that enables one to do that doesn't
mean such a thing exists.  To the extent "wisdom" means anything,
it refers to a grab-bag of qualities as various as self-discipline,
experience, and empathy.  
[4]Likewise, though "intelligent" means something, we're asking for
trouble if we insist on looking for a single thing called "intelligence."
And whatever its components, they're not all innate.  We use the
word "intelligent" as an indication of ability: a smart person can
grasp things few others could.  It does seem likely there's some
inborn predisposition to intelligence (and wisdom too), but this
predisposition is not itself intelligence.One reason we tend to think of intelligence as inborn is that people
trying to measure it have concentrated on the aspects of it that
are most measurable.  A quality that's inborn will obviously be
more convenient to work with than one that's influenced by experience,
and thus might vary in the course of a study.  The problem comes
when we drag the word "intelligence" over onto what they're measuring.
If they're measuring something inborn, they can't be measuring
intelligence.  Three year olds aren't smart.   When we describe one
as smart, it's shorthand for "smarter than other three year olds."SplitPerhaps it's a technicality to point out that a predisposition to
intelligence is not the same as intelligence.  But it's an important
technicality, because it reminds us that we can become smarter,
just as we can become wiser.The alarming thing is that we may have to choose between the two.If wisdom and intelligence are the average and peaks of the same
curve, then they converge as the number of points on the curve
decreases.  If there's just one point, they're identical: the average
and maximum are the same.  But as the number of points increases,
wisdom and intelligence diverge.  And historically the number of
points on the curve seems to have been increasing: our ability is
tested in an ever wider range of situations.In the time of Confucius and Socrates, people seem to have regarded
wisdom, learning, and intelligence as more closely related than we
do.  Distinguishing between "wise" and "smart" is a modern habit.
[5]
And the reason we do is that they've been diverging.  As knowledge
gets more specialized, there are more points on the curve, and the
distinction between the spikes and the average becomes sharper,
like a digital image rendered with more pixels.One consequence is that some old recipes may have become obsolete.
At the very least we have to go back and figure out if they were
really recipes for wisdom or intelligence.  But the really striking
change, as intelligence and wisdom drift apart, is that we may have
to decide which we prefer.  We may not be able to optimize for both
simultaneously.Society seems to have voted for intelligence.  We no longer admire
the sage—not the way people did two thousand years ago.  Now
we admire the genius.  Because in fact the distinction we began
with has a rather brutal converse: just as you can be smart without
being very wise, you can be wise without being very smart.  That
doesn't sound especially admirable.  That gets you James Bond, who
knows what to do in a lot of situations, but has to rely on Q for
the ones involving math.Intelligence and wisdom are obviously not mutually exclusive.  In
fact, a high average may help support high peaks.  But there are
reasons to believe that at some point you have to choose between
them.  One is the example of very smart people, who are so often
unwise that in popular culture this now seems to be regarded as the
rule rather than the exception.  Perhaps the absent-minded professor
is wise in his way, or wiser than he seems, but he's not wise in
the way Confucius or Socrates wanted people to be. 
[6]NewFor both Confucius and Socrates, wisdom, virtue, and happiness were
necessarily related.  The wise man was someone who knew what the
right choice was and always made it; to be the right choice, it had
to be morally right; he was therefore always happy, knowing he'd
done the best he could.  I can't think of many ancient philosophers
who would have disagreed with that, so far as it goes."The superior man is always happy; the small man sad," said Confucius.
[7]Whereas a few years ago I read an interview with a mathematician
who said that most nights he went to bed discontented, feeling he
hadn't made enough progress.  
[8]
The Chinese and Greek words we
translate as "happy" didn't mean exactly what we do by it, but
there's enough overlap that this remark contradicts them.Is the mathematician a small man because he's discontented?  No;
he's just doing a kind of work that wasn't very common in Confucius's
day.Human knowledge seems to grow fractally.  Time after time, something
that seemed a small and uninteresting area—experimental error,
even—turns out, when examined up close, to have as much in
it as all knowledge up to that point.  Several of the fractal buds
that have exploded since ancient times involve inventing and
discovering new things.  Math, for example, used to be something a
handful of people did part-time.  Now it's the career of thousands.
And in work that involves making new things, some old rules don't
apply.Recently I've spent some time advising people, and there I find the
ancient rule still works: try to understand the situation as well
as you can, give the best advice you can based on your experience,
and then don't worry about it, knowing you did all you could.  But
I don't have anything like this serenity when I'm writing an essay.
Then I'm worried.  What if I run out of ideas?  And when I'm writing,
four nights out of five I go to bed discontented, feeling I didn't
get enough done.Advising people and writing are fundamentally different types of
work.  When people come to you with a problem and you have to figure
out the right thing to do, you don't (usually) have to invent
anything.  You just weigh the alternatives and try to judge which
is the prudent choice.  But prudence can't tell me what sentence
to write next.  The search space is too big.Someone like a judge or a military officer can in much of his work
be guided by duty, but duty is no guide in making things.  Makers
depend on something more precarious: inspiration.  And like most
people who lead a precarious existence, they tend to be worried,
not contented.  In that respect they're more like the small man of
Confucius's day, always one bad harvest (or ruler) away from
starvation. Except instead of being at the mercy of weather and
officials, they're at the mercy of their own imagination.LimitsTo me it was a relief just to realize it might be ok to be discontented.
The idea that a successful person should be happy has thousands of
years of momentum behind it.  If I was any good, why didn't I have
the easy confidence winners are supposed to have?  But that, I now
believe, is like a runner asking "If I'm such a good athlete, why
do I feel so tired?" Good runners still get tired; they just get
tired at higher speeds.People whose work is to invent or discover things are in the same
position as the runner.  There's no way for them to do the best
they can, because there's no limit to what they could do.  The
closest you can come is to compare yourself to other people.  But
the better you do, the less this matters.  An undergrad who gets
something published feels like a star.  But for someone at the top
of the field, what's the test of doing well?  Runners can at least
compare themselves to others doing exactly the same thing; if you
win an Olympic gold medal, you can be fairly content, even if you
think you could have run a bit faster.  But what is a novelist to
do?Whereas if you're doing the kind of work in which problems are
presented to you and you have to choose between several alternatives,
there's an upper bound on your performance: choosing the best every
time.  In ancient societies, nearly all work seems to have been of
this type.  The peasant had to decide whether a garment was worth
mending, and the king whether or not to invade his neighbor, but
neither was expected to invent anything.  In principle they could
have; the king could have invented firearms, then invaded his
neighbor.  But in practice innovations were so rare that they weren't
expected of you, any more than goalkeepers are expected to score
goals. 
[9]
In practice, it seemed as if there was a correct decision
in every situation, and if you made it you'd done your job perfectly,
just as a goalkeeper who prevents the other team from scoring is
considered to have played a perfect game.In this world, wisdom seemed paramount.  
[10]
Even now, most people
do work in which problems are put before them and they have to
choose the best alternative.  But as knowledge has grown more
specialized, there are more and more types of work in which people
have to make up new things, and in which performance is therefore
unbounded.  Intelligence has become increasingly important relative
to wisdom because there is more room for spikes.RecipesAnother sign we may have to choose between intelligence and wisdom
is how different their recipes are.  Wisdom seems to come largely
from curing childish qualities, and intelligence largely from
cultivating them.Recipes for wisdom, particularly ancient ones, tend to have a
remedial character.  To achieve wisdom one must cut away all the
debris that fills one's head on emergence from childhood, leaving
only the important stuff.  Both self-control and experience have
this effect: to eliminate the random biases that come from your own
nature and from the circumstances of your upbringing respectively.
That's not all wisdom is, but it's a large part of it.  Much of
what's in the sage's head is also in the head of every twelve year
old.  The difference is that in the head of the twelve year old
it's mixed together with a lot of random junk.The path to intelligence seems to be through working on hard problems.
You develop intelligence as you might develop muscles, through
exercise.  But there can't be too much compulsion here.  No amount
of discipline can replace genuine curiosity.  So cultivating
intelligence seems to be a matter of identifying some bias in one's
character—some tendency to be interested in certain types of
things—and nurturing it.  Instead of obliterating your
idiosyncrasies in an effort to make yourself a neutral vessel for
the truth, you select one and try to grow it from a seedling into
a tree.The wise are all much alike in their wisdom, but very smart people
tend to be smart in distinctive ways.Most of our educational traditions aim at wisdom. So perhaps one
reason schools work badly is that they're trying to make intelligence
using recipes for wisdom.  Most recipes for wisdom have an element
of subjection.  At the very least, you're supposed to do what the
teacher says.  The more extreme recipes aim to break down your
individuality the way basic training does.  But that's not the route
to intelligence.  Whereas wisdom comes through humility, it may
actually help, in cultivating intelligence, to have a mistakenly
high opinion of your abilities, because that encourages you to keep
working.  Ideally till you realize how mistaken you were.(The reason it's hard to learn new skills late in life is not just
that one's brain is less malleable.  Another probably even worse
obstacle is that one has higher standards.)I realize we're on dangerous ground here.  I'm not proposing the
primary goal of education should be to increase students' "self-esteem."
That just breeds laziness.  And in any case, it doesn't really fool
the kids, not the smart ones.  They can tell at a young age that a
contest where everyone wins is a fraud.A teacher has to walk a narrow path: you want to encourage kids to
come up with things on their own, but you can't simply applaud
everything they produce.  You have to be a good audience: appreciative,
but not too easily impressed.  And that's a lot of work.  You have
to have a good enough grasp of kids' capacities at different ages
to know when to be surprised.That's the opposite of traditional recipes for education.  Traditionally
the student is the audience, not the teacher; the